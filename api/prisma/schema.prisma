// Prisma schema for PayLinksro
// DB: PostgreSQL
// Connection via env var: DATABASE_URL

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                      String              @id @default(cuid())
    email                   String              @unique
    role                    Role                @default(USER)
    tokenVersion            Int                 @default(0)
    stripeAccountId         String?             @unique
    onboardedAt             DateTime?
    stripeAccountStatusJson String?
    disabledAt              DateTime?
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt
    // Later: profile fields, roles, etc
    magicTokens             MagicLinkToken[]
    payLinks                PayLink[]
    customers               Customer[]
    transactions            Transaction[]
    active                  Boolean             @default(true)
    settings                UserSettings?
    monthlyFeeAccruals      MonthlyFeeAccrual[]
}

model MagicLinkToken {
    id        String           @id @default(cuid())
    userId    String
    user      User             @relation(fields: [userId], references: [id])
    tokenHash String           @unique
    email     String // redundant to support pre-user flow
    expiresAt DateTime
    usedAt    DateTime?
    createdAt DateTime         @default(now())
    purpose   MagicLinkPurpose @default(AUTH)
}

enum MagicLinkPurpose {
    AUTH
}

enum Role {
    USER
    ADMIN
}

// ---------------------------
// Pay links
// ---------------------------

model PayLink {
    id                    String      @id @default(cuid())
    userId                String
    user                  User        @relation(fields: [userId], references: [id])
    name                  String
    slug                  String      @unique
    priceType             PriceType
    amount                Int? // in minor units (bani) when priceType == FIXED
    minAmount             Int? // in minor units (bani) when priceType == FLEXIBLE
    currency              String      @default("RON")
    active                Boolean     @default(true)
    serviceType           ServiceType @default(SERVICE)
    description           String?
    collectEmail          Boolean     @default(true)
    collectPhone          Boolean     @default(false)
    collectBillingAddress Boolean     @default(false)
    // When true, add 21% VAT on top of the price at checkout
    addVat                Boolean     @default(true)
    mainColor             String? // hex color like #fbbf24
    createdAt             DateTime    @default(now())
    updatedAt             DateTime    @updatedAt

    // Optional 1-1 metadata depending on serviceType
    service      ServiceItem?
    product      DigitalProduct?
    fundraising  FundraisingCampaign?
    transactions Transaction[]

    @@index([userId, createdAt])
}

enum PriceType {
    FIXED
    FLEXIBLE
}

enum ServiceType {
    SERVICE
    DIGITAL_PRODUCT
    DONATION
    FUNDRAISING
}

// ---------------------------
// Customers and Transactions
// ---------------------------

model Customer {
    id           String   @id @default(cuid())
    userId       String // Owner (seller)
    user         User     @relation(fields: [userId], references: [id])
    // Collected depending on PayLink configuration
    email        String?
    phone        String?
    name         String?
    // Basic billing address fields (Stripe-style)
    addressLine1 String?
    addressLine2 String?
    city         String?
    postalCode   String?
    state        String?
    country      String?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    transactions Transaction[]

    @@index([userId, email])
    @@index([userId, phone])
}

enum TransactionStatus {
    SUCCEEDED
    FAILED
    REFUNDED
    PENDING
    UNCAPTURED
    DISPUTED
    REQUIRES_ACTION
}

model Transaction {
    id         String    @id @default(cuid())
    userId     String // Owner (seller)
    user       User      @relation(fields: [userId], references: [id])
    payLinkId  String
    payLink    PayLink   @relation(fields: [payLinkId], references: [id])
    customerId String?
    customer   Customer? @relation(fields: [customerId], references: [id])

    amount      Int // minor units (bani)
    currency    String            @default("RON")
    status      TransactionStatus
    succeededAt DateTime?
    disputedAt  DateTime?

    // Stripe references
    stripePaymentIntentId String? @unique
    stripeChargeId        String? @unique

    // Payment method details (if card)
    paymentMethodType String?
    cardBrand         String?
    cardLast4         String?

    description    String?
    receiptUrl     String?
    failureCode    String?
    failureMessage String?
    refundedAmount Int?
    refundedAt     DateTime?

    // Net amount to seller (minor units)
    netAmount Int?

    // Fee breakdown (minor units)
    appFeePercent Int? // 5% portion
    appFeeFixed   Int? // fixed +1 or +2 RON portion per transaction
    appFeeMonthly Int? // portion of the monthly active fee charged on this transaction

    // Dispute reference
    stripeDisputeId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId, createdAt])
    @@index([userId, succeededAt])
    @@index([payLinkId, createdAt])
}

// ---------------------------
// Platform monthly active fee accruals
// ---------------------------

model MonthlyFeeAccrual {
    id                String   @id @default(cuid())
    userId            String
    user              User     @relation(fields: [userId], references: [id])
    month             DateTime // normalized to first day of the month UTC
    // How much of the monthly active fee has been collected so far (minor units)
    collected         Int      @default(0)
    // Optional stripe payment intent or charge that last contributed
    lastTransactionId String?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt

    @@unique([userId, month])
    @@index([userId, month])
}

// ---------------------------
// User Settings
// ---------------------------

enum PayoutInterval {
    daily
    weekly
    monthly
    manual
}

model UserSettings {
    id     String @id @default(cuid())
    userId String @unique
    user   User   @relation(fields: [userId], references: [id])

    // Payments settings
    autoPayouts        Boolean        @default(true)
    payoutInterval     PayoutInterval @default(daily)
    emailNotifications Boolean        @default(true)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Detailed info for service-type links
model ServiceItem {
    id            String  @id @default(cuid())
    payLinkId     String  @unique
    payLink       PayLink @relation(fields: [payLinkId], references: [id])
    title         String
    description   String?
    coverImageUrl String?
    // later: images, delivery terms, etc.
}

// Detailed info for digital products
model DigitalProduct {
    id            String  @id @default(cuid())
    payLinkId     String  @unique
    payLink       PayLink @relation(fields: [payLinkId], references: [id])
    name          String
    description   String?
    assets        Json?
    coverImageUrl String?
}

// Fundraising campaign details
model FundraisingCampaign {
    id            String  @id @default(cuid())
    payLinkId     String  @unique
    payLink       PayLink @relation(fields: [payLinkId], references: [id])
    targetAmount  Int?
    currentRaised Int?    @default(0)
    coverImageUrl String?
}

// ---------------------------
// Webhook idempotency store
// ---------------------------

model WebhookEvent {
    id        String   @id @default(cuid())
    provider  String   @default("STRIPE")
    eventId   String
    type      String?
    createdAt DateTime @default(now())

    @@unique([provider, eventId])
    @@index([createdAt])
}
