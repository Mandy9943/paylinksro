// Prisma schema for PayLinksro
// DB: PostgreSQL
// Connection via env var: DATABASE_URL

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                      String           @id @default(cuid())
    email                   String           @unique
    role                    Role             @default(USER)
    tokenVersion            Int              @default(0)
    stripeAccountId         String?          @unique
    onboardedAt             DateTime?
    stripeAccountStatusJson String?
    disabledAt              DateTime?
    createdAt               DateTime         @default(now())
    updatedAt               DateTime         @updatedAt
    // Later: profile fields, roles, etc
    sessions                Session[]
    magicTokens             MagicLinkToken[]
    payLinks                PayLink[]
}

model Session {
    id        String   @id @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    // Optional: expiresAt, userAgent, ip
}

model MagicLinkToken {
    id        String           @id @default(cuid())
    userId    String
    user      User             @relation(fields: [userId], references: [id])
    tokenHash String           @unique
    email     String // redundant to support pre-user flow
    expiresAt DateTime
    usedAt    DateTime?
    createdAt DateTime         @default(now())
    purpose   MagicLinkPurpose @default(AUTH)
}

enum MagicLinkPurpose {
    AUTH
}

enum Role {
    USER
    ADMIN
}

// ---------------------------
// Pay links
// ---------------------------

model PayLink {
    id           String      @id @default(cuid())
    userId       String
    user         User        @relation(fields: [userId], references: [id])
    name         String
    slug         String
    priceType    PriceType
    amount       Int? // in minor units (bani) when priceType == FIXED
    currency     String      @default("RON")
    active       Boolean     @default(true)
    serviceType  ServiceType @default(SERVICE)
    description  String?
    collectEmail Boolean     @default(true)
    collectPhone Boolean     @default(false)
    mainColor    String? // hex color like #fbbf24
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt

    // Optional 1-1 metadata depending on serviceType
    service ServiceItem?
    product DigitalProduct?

    @@unique([userId, slug])
    @@index([userId, createdAt])
}

enum PriceType {
    FIXED
    FLEXIBLE
}

enum ServiceType {
    SERVICE
    DIGITAL_PRODUCT
    DONATION
}

// Detailed info for service-type links
model ServiceItem {
    id          String  @id @default(cuid())
    payLinkId   String  @unique
    payLink     PayLink @relation(fields: [payLinkId], references: [id])
    title       String
    description String?
    // later: images, delivery terms, etc.
}

// Detailed info for digital products
model DigitalProduct {
    id            String  @id @default(cuid())
    payLinkId     String  @unique
    payLink       PayLink @relation(fields: [payLinkId], references: [id])
    name          String
    description   String?
    assets        Json?
    coverImageUrl String?
}
